#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV 1
#define NUM 2
#define TAP_SPEED 200

/ {
    macros {
        awesome: awesome_macro {
            compatible = "zmk,behavior-macro";
            label = "AWESOME_WIN_TAG";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_press>,
                <&mo 2 &kp LGUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2 &kp LGUI>;
        };
        awesome_left_tag: awesome_left_tag {
            compatible = "zmk,behavior-macro";
            label = "AWESOME_LEFT_TAG";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp LEFT_ARROW>,
                <&macro_release>,
                <&kp LEFT_GUI>;
        };
        awesome_left_win: awesome_left_win {
            compatible = "zmk,behavior-macro";
            label = "AWESOME_LEFT_WIN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LEFT_GUI>;
        };
        awesome_right_win: awesome_right_win {
            compatible = "zmk,behavior-macro";
            label = "AWESOME_RIGHT_WIN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LEFT_GUI>;
        };
        awesome_right_tag: awesome_right_tag {
            compatible = "zmk,behavior-macro";
            label = "AWESOME_RIGHT_TAG";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LEFT_GUI>;
        };
        triple_grave: triple_grave {
            compatible = "zmk,behavior-macro";
            label = "TRIPLE_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
        };
        homepath: homepath {
            compatible = "zmk,behavior-macro";
            label = "HOMEPATH";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp LEFT_BRACKET>;
        };
    };

    behaviors {
        tdawesome: tap_dance_awesome {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings =
                <&awesome>,
                <&kp LGUI>;
        };
        tild_home: tild_home {
            compatible = "zmk,behavior-tap-dance";
            label = "TILD_HOME";
            #binding-cells = <0>;
            bindings =
                <&kp TILDE>,
                <&homepath>,
                <&triple_grave>;
        };
        esc_grave: esc_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "ESC_GRAVE";
            mods = <(MOD_LSFT|MOD_RSFT)>;
            #binding-cells = <0>;
            bindings = 
                <&kp ESC>,
                <&kp GRAVE>;
        };
    };

    // LAYERS
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <1 2>;
    //         then-layer = <3>;
    //     };
    // };

    combos {
        compatible = "zmk,combos";

        new_combo {
            bindings = <&kp CAPSLOCK>;
            key-positions = <35 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";


        base {
            bindings = <
&esc_grave       &kp Q  &kp W       &kp E  &kp R          &kp T          &kp N9            &kp N0          &kp Y  &kp U       &kp I      &kp O        &kp P     &kp RIGHT_BRACKET
&kp LEFT_BRACKET &kp A  &kp S       &kp D  &kp F          &kp G          &kp MINUS         &kp EQUAL       &kp H  &kp J       &kp K      &kp L        &kp SEMI  &kp QUOT
&kp BSLH         &kp Z  &kp X       &kp C  &kp V          &kp B          &tild_home        &kp ENTER       &kp N  &kp M       &kp COMMA  &kp DOT      &kp FSLH  &kp BSPC  
                                    &mo 1  &mt LSHIFT DEL &mt LALT TAB   &mt LCTRL SPACE   &mt RCTRL SPACE &sl 2  &tdawesome  &kp RSHIFT
            >;

            label = "base";
        };

        nav {
            bindings = <
&trans             &trans  &kp LS(PAGE_DOWN)   &kp LS(PAGE_DOWN)              &trans  &trans  &trans  &trans  &trans  &kp HOME  &kp PG_DN  &kp PG_UP    &kp END  &trans
&trans             &trans             &trans              &trans              &trans  &trans  &trans  &trans  &trans  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &trans
&trans  &awesome_left_tag  &awesome_left_win  &awesome_right_win  &awesome_right_tag  &trans  &trans  &trans  &trans    &trans     &trans     &trans     &trans  &trans
                                                          &trans              &trans  &trans  &trans  &trans  &trans    &trans     &trans
            >;

            label = "navigation";
        };

        num {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3   &kp F4  &trans  &trans  &trans  &trans    &kp N1     &kp N2     &kp N3     &kp N4        &kp N5
&trans  &kp F5   &kp F6   &kp F7   &kp F8  &trans  &trans  &trans  &trans    &kp N6     &kp N7     &kp N8     &kp N9        &kp N0
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans  &trans  &trans   &kp DOT  &kp COMMA  &kp MINUS  &kp EQUAL  &kp LS(PLUS)
                          &trans   &trans  &trans  &trans  &trans  &trans  &kp LGUI     &trans
            >;

            label = "numbers";
        };
    };
};
