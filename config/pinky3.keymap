#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV 1
#define NUM 2

// TAP_DANCE settings
#define TAP_SPEED 200

// MACROS to make the the code easier to read
// include name or reference in keymap
// Format: 
//      name        reference  key1 key2 
#define TD_TAB      &td0    // TAB ESC
#define TD_CAPLOCK  &td1    // LSHIFT CAPSLOCK 
#define TD_SPC      &td2    // SPACE ENTER 
#define TD_SLSH     &td3    // SLASH QMARK
#define TD_QUOTE    &td4    // QUOTE DOUBLE_QUOTES
#define TD_EQL      &td5    // EQUAL PLUS
#define TD_BSLS     &td6    // BACKSLASH PIPE 
#define TD_MINUS    &td7    // MINUS UNDERSCORE
#define TD_SCLN     &td8    // SEMICOLON COLON 
#define TD_COMM     &td9    // COMMA LESS_THAN 
#define TD_DOT      &td10   // PERIOD GREATER_THAN 
#define TD_BACKF    &td11   // GRAVE TILDE
#define TD_ALT      &td12   // LALT GUI
#define TD_ARR      &td13   // Q AT (@)
#define TD_ATCAT    &td14   // AT CARET 
#define TD_TAW      &td15   // TAB LWIN
#define TD_SCLOCK   &td16   // (S)LSHIFT CAPSLOCK (Sticky shift)
#define TD_AWE      &td17   // GUI GUI+SHIFT
#define SF_DEL      &mt LSHIFT DEL
#define ALT_TAB     &mt LALT TAB
#define LCTL_SPS    &mt LCTRL SPACE
#define RCTL_SPS    &mt RCTRL SPACE

// include &name in keymap to use
// FORMAT
//   natural --> (on shift)
//   number --> symbols | number code --> symbol code 
// one_lpar    1 --> (  | N1 --> LPAR
// two_par     2 --> )  | N2 --> RPAR
// three_rbrc  3 --> }  | N3 --> RBRC
// four_pl     4 --> ]  | N4 --> PLUS
// five_lbrc   5 --> {  | N5 --> RSFT
// six_rbkt    6 --> ]  | N6 --> RBKT
// seven_lbkt  7 --> [  | N7 --> LBKT
// eight_exlm  8 --> !  | N8 --> EXCL
// nine_equal  9 --> =  | N9 --> EQUAL
// zero_s      0 --> *  | N0 --> STAR

/*
// Sticky key config if desired
&sk {
    //release-after-ms = <2000>;
    quick-release;
};

*/

/ {

	macros {
	awesome: awesome {
		label = "awesome_macro";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
        wait-ms = <0>;
		bindings
			= <&macro_press &mo NAV &kp LS(GUI)>
            , <&macro_pause_for_release>
            , <&macro_release &mo NAV &kp LSHFT>;
		};
    };

    behaviors{  
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp TAB>, <&kp ESC>;

            }; 
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;
            }; 
        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SPACE>, <&kp ENTER>;
            }; 
        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SLASH>, <&kp QMARK>;
            }; 
        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
            }; 
        td5: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp EQUAL>, <&kp PLUS>;
            }; 
        td6: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_6"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp BACKSLASH>, <&kp PIPE>;
            }; 
        td7: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_7"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
            }; 
        td8: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_8"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SEMICOLON>, <&kp COLON>;
            }; 
        td9: tap_dance_9 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_9"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp COMMA>, <&kp LESS_THAN>;
            }; 
        td10: tap_dance_10 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_10"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp PERIOD>, <&kp GREATER_THAN>;
            }; 
        td11: tap_dance_11 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_11"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp GRAVE>, <&kp TILDE>;
            };            

        td12: tap_dance_12 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_12"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp LALT>, <&kp GUI>;
            };
        td13: tap_dance_13 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_13"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp Q>, <&kp AT>;
            };
        td14: tap_dance_14 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_14"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp AT>, <&kp CARET>;
            };
        td15: tap_dance_15 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_15"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp TAB>, <&kp LWIN>;
            };
        td16: tap_dance_16 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_16"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&sk LSHIFT>, <&kp CAPSLOCK>;
            }; 
        td17: tap_dance_17 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&awesome>, <&kp GUI>;
        };
        // create the shifts of dvorak 
        seven_lbkt: seven_lbkt{ 
                compatible = "zmk,behavior-mod-morph";
                label="SEVEN_LBKT";
                #binding-cells = <0>;
                bindings = <&kp N7>, <&kp LBKT>;  
                mods=<(MOD_LSFT|MOD_RSFT)>;
            }; 
        five_lbrc: five_lbrc {
                compatible = "zmk,behavior-mod-morph";
                label="FIVE_LBRC";
                #binding-cells = <0>; 
                bindings = <&kp N5>,<&kp LBRC>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        three_rbrc: three_rbrc {
                compatible = "zmk,behavior-mod-morph";
                label="THREE_RBRC";
                #binding-cells = <0>; 
                bindings = <&kp N3>,<&kp RBRC>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        one_lpar: one_lpar {
                compatible = "zmk,behavior-mod-morph";
                label="ONE_LPAR";
                #binding-cells = <0>; 
                bindings = <&kp N1>,<&kp LPAR>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        nine_equal: nine_equal {
                compatible = "zmk,behavior-mod-morph";
                label="nine_equal";
                #binding-cells = <0>; 
                bindings = <&kp N9>,    <&kp EQUAL>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        zero_s: zero_star { 
                compatible = "zmk,behavior-mod-morph";
                label="ZERO_STAR";
                #binding-cells = <0>;
                bindings = <&kp N0>, <&kp STAR>;  
                mods=<(MOD_LSFT|MOD_RSFT)>;
            }; 
        two_par: two_paren {
                compatible = "zmk,behavior-mod-morph";
                label="TWO_PAR";
                #binding-cells = <0>; 
                bindings = <&kp N2>,<&kp RPAR>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        four_pl: four_plus {
                compatible = "zmk,behavior-mod-morph";
                label="FOUR_PLUS";
                #binding-cells = <0>; 
                bindings = <&kp N4>,<&kp PLUS>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        six_rbkt: six_rbkt {
                compatible = "zmk,behavior-mod-morph";
                label="six_rbkt";
                #binding-cells = <0>; 
                bindings = <&kp N6>,<&kp RBKT>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        eight_exlm: eight_exlm {
                compatible = "zmk,behavior-mod-morph";
                label="EIGHT_EXLM";
                #binding-cells = <0>; 
                bindings = <&kp N8>,    <&kp EXCL>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
    };

    // LAYERS
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <1 2>;
    //         then-layer = <3>;
    //     };
    // };
    keymap {
        compatible = "zmk,keymap";
        default_layer {
// -----------------------------------------------------------------------------------------
// |       | TAB:ESC  | ; : | , < | . > |  P  |  Y  |         | F   |  G   |  C  |  R  |  L  | BKSP |     |
// |       | CTRL     |  A  |  O  |  E  |  U  |  I  |         |  D  |  H   |  T  |  N  |  S  |  DEL |     |  
// |       | LSFT:CAP |' "  | q @ | J   | K   |  X  |         |  B  |  M   |  W  |  V  |  Z  | TAB  |     |
//                          |     | GUI | LWR | SPC |         | ENT | RSE  | ALT |     |
                    bindings = <
  &kp ESC    &kp SCLN &kp COMMA &kp DOT  &kp P    &kp Y   &kp LPAR               &kp RPAR  &kp F    &kp G  &kp C      &kp R       &kp L    &kp EQUAL
  &kp SLASH  &kp A    &kp O     &kp E    &kp U    &kp I   &kp LBRC               &kp RBRC  &kp D    &kp H  &kp T      &kp N       &kp S    &kp MINUS
  TD_BSLS    TD_QUOTE TD_ARR    &kp J    &kp K    &kp X   TD_BACKF               &kp ENTER &kp B    &kp M  &kp W      &kp V       &kp Z    &kp BACKSPACE
                                &mo NAV  SF_DEL   ALT_TAB LCTL_SPS               RCTL_SPS  &mo NUM  TD_AWE &kp LSHIFT
                        >;
                };

// -----------------------------------------------------------------------------------------
// |       | TAB:ESC  | ; : | , < | . > |  P  |  Y  |         | F   |  G   |  C  |  R  |  L  | BKSP |     |
// |       | CTRL     |  A  |  O  |  E  |  U  |  I  |         |  D  |  H   |  T  |  N  |  S  |  DEL |     |  
// |       | LSFT:CAP |' "  | q @ | J   | K   |  X  |         |  B  |  M   |  W  |  V  |  Z  | TAB  |     |
//                          |     | GUI | LWR | SPC |         | ENT | RSE  | ALT |     |
        nav_layer {
                bindings = <
  &kp ESC    TD_SCLN  TD_COMM TD_DOT   &kp P    &kp Y   &kp LPAR               &kp F    &kp G  &kp C      &kp R       &kp L    &kp BSPC &kp BSPC
  &kp SLASH  &kp A    &kp O   &kp E    &kp U    &kp I   &kp LBRC               &kp D    &kp H  &kp T      &kp N       &kp S    &kp DEL  &kp DEL
  TD_BSLS    TD_QUOTE TD_ARR  &kp J    &kp K    &kp X   TD_BACKF               &kp B    &kp M  &kp W      &kp V       &kp Z    TD_TAW   TD_TAW
                              &mo NAV  SF_DEL   ALT_TAB LCTL_SPS               RCTL_SPS &mo NUM  TD_AWE &kp LSHIFT
                >;
        };
    };
};
